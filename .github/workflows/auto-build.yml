# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Deploy to AWS EC2 with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: junior-test-bucket
  CODE_DEPLOY_APPLICATION_NAME: hanghae-week5-a9-auto-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: hanghae-week5-a9
  RESOURCE_PATH: ./src/main/resources/application.yaml
  

permissions:
  contents: read

jobs:
  Deploy:
    name: Build first and then Deploy
    runs-on: ubuntu-latest

    steps:
    # 브랜치 체크아웃
    - name: Checkout 
      uses: actions/checkout@v3
    # JDK 11 세팅
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    # properties 설정 파일 쓰기
    - name: Generate Environment Variables File for Properties
      uses: microsoft/variable-substitution@v1
      with:
       files: ${{ env.RESOURCE_PATH }}
      env:
       cloud.aws.credentials.accessKey: ${{ secrets.AWS_ACCESS_KEY_ID }}
       cloud.aws.credentials.secretKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    
    # 권한 재설정
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
    # Gradle build
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean build -x test
    # AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    # 빌드 결과물을 S3 버킷에 업로드
    - name: Upload to AWS S3
      run: aws deploy push --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} --ignore-hidden-files --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip --source .
          
    # S3 버킷의 파일을 대상으로 codedeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
        --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
        --deployment-config-name CodeDeployDefault.AllAtOnce \
        --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
        --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
